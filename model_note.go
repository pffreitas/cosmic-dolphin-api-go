/*
Cosmic Dolphin

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cosmicdolphinapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Note type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Note{}

// Note struct for Note
type Note struct {
	Id *int64 `json:"id,omitempty"`
	DocumentId *int64 `json:"documentId,omitempty"`
	Title string `json:"title"`
	Summary string `json:"summary"`
	Tags string `json:"tags"`
	Type NoteType `json:"type"`
	Sections []NoteSection `json:"sections"`
	UserId string `json:"userId"`
	CreatedAt time.Time `json:"createdAt"`
	Pipelines []Pipeline `json:"pipelines"`
}

type _Note Note

// NewNote instantiates a new Note object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNote(title string, summary string, tags string, type_ NoteType, sections []NoteSection, userId string, createdAt time.Time, pipelines []Pipeline) *Note {
	this := Note{}
	this.Title = title
	this.Summary = summary
	this.Tags = tags
	this.Type = type_
	this.Sections = sections
	this.UserId = userId
	this.CreatedAt = createdAt
	this.Pipelines = pipelines
	return &this
}

// NewNoteWithDefaults instantiates a new Note object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteWithDefaults() *Note {
	this := Note{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Note) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Note) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Note) SetId(v int64) {
	o.Id = &v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *Note) GetDocumentId() int64 {
	if o == nil || IsNil(o.DocumentId) {
		var ret int64
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetDocumentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *Note) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given int64 and assigns it to the DocumentId field.
func (o *Note) SetDocumentId(v int64) {
	o.DocumentId = &v
}

// GetTitle returns the Title field value
func (o *Note) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Note) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Note) SetTitle(v string) {
	o.Title = v
}

// GetSummary returns the Summary field value
func (o *Note) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *Note) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *Note) SetSummary(v string) {
	o.Summary = v
}

// GetTags returns the Tags field value
func (o *Note) GetTags() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Note) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *Note) SetTags(v string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *Note) GetType() NoteType {
	if o == nil {
		var ret NoteType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Note) GetTypeOk() (*NoteType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Note) SetType(v NoteType) {
	o.Type = v
}

// GetSections returns the Sections field value
func (o *Note) GetSections() []NoteSection {
	if o == nil {
		var ret []NoteSection
		return ret
	}

	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value
// and a boolean to check if the value has been set.
func (o *Note) GetSectionsOk() ([]NoteSection, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sections, true
}

// SetSections sets field value
func (o *Note) SetSections(v []NoteSection) {
	o.Sections = v
}

// GetUserId returns the UserId field value
func (o *Note) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Note) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Note) SetUserId(v string) {
	o.UserId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Note) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Note) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Note) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetPipelines returns the Pipelines field value
func (o *Note) GetPipelines() []Pipeline {
	if o == nil {
		var ret []Pipeline
		return ret
	}

	return o.Pipelines
}

// GetPipelinesOk returns a tuple with the Pipelines field value
// and a boolean to check if the value has been set.
func (o *Note) GetPipelinesOk() ([]Pipeline, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pipelines, true
}

// SetPipelines sets field value
func (o *Note) SetPipelines(v []Pipeline) {
	o.Pipelines = v
}

func (o Note) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Note) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	toSerialize["title"] = o.Title
	toSerialize["summary"] = o.Summary
	toSerialize["tags"] = o.Tags
	toSerialize["type"] = o.Type
	toSerialize["sections"] = o.Sections
	toSerialize["userId"] = o.UserId
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["pipelines"] = o.Pipelines
	return toSerialize, nil
}

func (o *Note) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"summary",
		"tags",
		"type",
		"sections",
		"userId",
		"createdAt",
		"pipelines",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNote := _Note{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNote)

	if err != nil {
		return err
	}

	*o = Note(varNote)

	return err
}

type NullableNote struct {
	value *Note
	isSet bool
}

func (v NullableNote) Get() *Note {
	return v.value
}

func (v *NullableNote) Set(val *Note) {
	v.value = val
	v.isSet = true
}

func (v NullableNote) IsSet() bool {
	return v.isSet
}

func (v *NullableNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNote(val *Note) *NullableNote {
	return &NullableNote{value: val, isSet: true}
}

func (v NullableNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


