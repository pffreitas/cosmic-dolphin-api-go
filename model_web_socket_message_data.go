/*
Cosmic Dolphin

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cosmicdolphinapi

import (
	"encoding/json"
	"fmt"
)


// WebSocketMessageData struct for WebSocketMessageData
type WebSocketMessageData struct {
	Note *Note
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *WebSocketMessageData) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Note
	err = json.Unmarshal(data, &dst.Note);
	if err == nil {
		jsonNote, _ := json.Marshal(dst.Note)
		if string(jsonNote) == "{}" { // empty struct
			dst.Note = nil
		} else {
			return nil // data stored in dst.Note, return on the first match
		}
	} else {
		dst.Note = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(WebSocketMessageData)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *WebSocketMessageData) MarshalJSON() ([]byte, error) {
	if src.Note != nil {
		return json.Marshal(&src.Note)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableWebSocketMessageData struct {
	value *WebSocketMessageData
	isSet bool
}

func (v NullableWebSocketMessageData) Get() *WebSocketMessageData {
	return v.value
}

func (v *NullableWebSocketMessageData) Set(val *WebSocketMessageData) {
	v.value = val
	v.isSet = true
}

func (v NullableWebSocketMessageData) IsSet() bool {
	return v.isSet
}

func (v *NullableWebSocketMessageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebSocketMessageData(val *WebSocketMessageData) *NullableWebSocketMessageData {
	return &NullableWebSocketMessageData{value: val, isSet: true}
}

func (v NullableWebSocketMessageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebSocketMessageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


