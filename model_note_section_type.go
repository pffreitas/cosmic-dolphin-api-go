/*
Cosmic Dolphin

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cosmicdolphinapi

import (
	"encoding/json"
	"fmt"
)

// NoteSectionType the model 'NoteSectionType'
type NoteSectionType string

// List of NoteSectionType
const (
	TEXT NoteSectionType = "text"
)

// All allowed values of NoteSectionType enum
var AllowedNoteSectionTypeEnumValues = []NoteSectionType{
	"text",
}

func (v *NoteSectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NoteSectionType(value)
	for _, existing := range AllowedNoteSectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NoteSectionType", value)
}

// NewNoteSectionTypeFromValue returns a pointer to a valid NoteSectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNoteSectionTypeFromValue(v string) (*NoteSectionType, error) {
	ev := NoteSectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NoteSectionType: valid values are %v", v, AllowedNoteSectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NoteSectionType) IsValid() bool {
	for _, existing := range AllowedNoteSectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NoteSectionType value
func (v NoteSectionType) Ptr() *NoteSectionType {
	return &v
}

type NullableNoteSectionType struct {
	value *NoteSectionType
	isSet bool
}

func (v NullableNoteSectionType) Get() *NoteSectionType {
	return v.value
}

func (v *NullableNoteSectionType) Set(val *NoteSectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteSectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteSectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteSectionType(val *NoteSectionType) *NullableNoteSectionType {
	return &NullableNoteSectionType{value: val, isSet: true}
}

func (v NullableNoteSectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteSectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

