/*
Cosmic Dolphin

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cosmicdolphinapi

import (
	"encoding/json"
	"fmt"
)

// NoteType the model 'NoteType'
type NoteType string

// List of NoteType
const (
	FUP NoteType = "fup"
	CHATTER NoteType = "chatter"
)

// All allowed values of NoteType enum
var AllowedNoteTypeEnumValues = []NoteType{
	"fup",
	"chatter",
}

func (v *NoteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NoteType(value)
	for _, existing := range AllowedNoteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NoteType", value)
}

// NewNoteTypeFromValue returns a pointer to a valid NoteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNoteTypeFromValue(v string) (*NoteType, error) {
	ev := NoteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NoteType: valid values are %v", v, AllowedNoteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NoteType) IsValid() bool {
	for _, existing := range AllowedNoteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NoteType value
func (v NoteType) Ptr() *NoteType {
	return &v
}

type NullableNoteType struct {
	value *NoteType
	isSet bool
}

func (v NullableNoteType) Get() *NoteType {
	return v.value
}

func (v *NullableNoteType) Set(val *NoteType) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteType) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteType(val *NoteType) *NullableNoteType {
	return &NullableNoteType{value: val, isSet: true}
}

func (v NullableNoteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

